import{_ as n,o as s,c as a,a as t}from"./app-0433ff63.js";const e={},p=t(`<p>JS</p><h1 id="_1-javascript介绍" tabindex="-1"><a class="header-anchor" href="#_1-javascript介绍" aria-hidden="true">#</a> 1. JavaScript介绍</h1><h2 id="_1-1-js的功能" tabindex="-1"><a class="header-anchor" href="#_1-1-js的功能" aria-hidden="true">#</a> 1.1 js的功能</h2><p>可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验</p><h2 id="_1-2-js的特点" tabindex="-1"><a class="header-anchor" href="#_1-2-js的特点" aria-hidden="true">#</a> 1.2 js的特点</h2><ol><li>js源码不需要编译，浏览器可以直接解释运行。</li><li>js是弱类型语言，js变量声明不需要指明类型。</li></ol><h2 id="_1-3-js的组成" tabindex="-1"><a class="header-anchor" href="#_1-3-js的组成" aria-hidden="true">#</a> 1.3 js的组成</h2><ol><li>ECMAScript : 构成了JS核心的语法基础</li><li>BOM : Browser Object Model 浏览器对象模型，用来操作浏览器上的对象</li><li>DOM : Document Object Model 文档对象模型，用来操作网页中的元素（标签）</li></ol><h1 id="_2-javascript基础语法" tabindex="-1"><a class="header-anchor" href="#_2-javascript基础语法" aria-hidden="true">#</a> 2. JavaScript基础语法</h1><h2 id="_2-1-html引用js" tabindex="-1"><a class="header-anchor" href="#_2-1-html引用js" aria-hidden="true">#</a> 2.1 html引用js</h2><h3 id="_2-1-1-内部引入" tabindex="-1"><a class="header-anchor" href="#_2-1-1-内部引入" aria-hidden="true">#</a> 2.1.1 内部引入</h3><p>定义script标签，标签体内容就是js代码</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token comment">//js代码</span>
 
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-2-外部引用" tabindex="-1"><a class="header-anchor" href="#_2-1-2-外部引用" aria-hidden="true">#</a> 2.1.2 外部引用</h3><ol><li>script标签不能自闭合。</li><li>如果script标签使用src属性，那么浏览器将不会解析此标签体的js代码。</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js/文件名.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-1-3-行内形式" tabindex="-1"><a class="header-anchor" href="#_2-1-3-行内形式" aria-hidden="true">#</a> 2.1.3 行内形式</h3><p>行内写法，目前这种写法不推荐</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;点我&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-2-js输出输入数据的方式" tabindex="-1"><a class="header-anchor" href="#_2-2-js输出输入数据的方式" aria-hidden="true">#</a> 2.2 js输出输入数据的方式</h2><h3 id="_2-2-1-浏览器弹窗" tabindex="-1"><a class="header-anchor" href="#_2-2-1-浏览器弹窗" aria-hidden="true">#</a> 2.2.1 浏览器弹窗</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;小猪佩奇&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-2-输出html页面" tabindex="-1"><a class="header-anchor" href="#_2-2-2-输出html页面" aria-hidden="true">#</a> 2..2.2 输出html页面</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;输出页面内容&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-3-输出控制台" tabindex="-1"><a class="header-anchor" href="#_2-2-3-输出控制台" aria-hidden="true">#</a> 2.2.3 输出控制台</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;控制台输出&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-4-弹出框输入" tabindex="-1"><a class="header-anchor" href="#_2-2-4-弹出框输入" aria-hidden="true">#</a> 2.2.4 弹出框输入</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;输入&#39;</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-js注释" tabindex="-1"><a class="header-anchor" href="#_2-3-js注释" aria-hidden="true">#</a> 2.3 js注释</h2><h3 id="_2-3-1-单行注释" tabindex="-1"><a class="header-anchor" href="#_2-3-1-单行注释" aria-hidden="true">#</a> 2.3.1 单行注释</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>//注释内容
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-3-2-多行注释" tabindex="-1"><a class="header-anchor" href="#_2-3-2-多行注释" aria-hidden="true">#</a> 2.3.2 多行注释</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>/* 注释内容 */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-4-js变量声明" tabindex="-1"><a class="header-anchor" href="#_2-4-js变量声明" aria-hidden="true">#</a> 2.4 js变量声明</h2><p>js是弱类型语言，不注重变量的定义，所以在定义变量时不需要指定数据类型</p><p>强类型语言，注重变量的定义，所以在定义不变量时都需要指定数据类型（如 java）</p><h3 id="_2-4-1-定义变量" tabindex="-1"><a class="header-anchor" href="#_2-4-1-定义变量" aria-hidden="true">#</a> 2.4.1 定义变量</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//局部变量 用let定义</span>
<span class="token keyword">let</span> 变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span>
<span class="token comment">//全局变量 用var定义 此var是被淘汰的</span>
<span class="token keyword">var</span> 变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-2-定义常量" tabindex="-1"><a class="header-anchor" href="#_2-4-2-定义常量" aria-hidden="true">#</a> 2.4.2 定义常量</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//常量定义 const</span>
<span class="token keyword">const</span> 常量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token comment">//整数类型</span>
        <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

        <span class="token comment">// Boolean类型</span>
        <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token comment">// 定义小数类型  小数和整数类型统称为number类型</span>
        <span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">2.333</span><span class="token punctuation">;</span>

        <span class="token comment">// 定义常量类型  常量类型一旦被定义就不能被改变</span>
        <span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span>

        <span class="token comment">//boolean类型 </span>
        <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> m<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// undefined;  表示变量未被定义</span>

        <span class="token comment">// 字符串类型 string</span>
        <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token string">&quot;dd&quot;</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-3-变量常量理解" tabindex="-1"><a class="header-anchor" href="#_2-4-3-变量常量理解" aria-hidden="true">#</a> 2.4.3 变量常量理解</h3><p>变量：</p><ol><li>具有块级作用域；</li><li>不能重复声明；</li><li>在循环中迭代变量时js后台会为每个迭代循环声明一个新的循环变量；</li><li>let声明的变量不会被提升；</li><li>全局声明的let变量不是全局对象window的属性，但是作用域还是在全局；</li></ol><p>常量：</p><ol><li>具有let的相同点。</li><li>const声明的是常量，不允许修改它指向的引用；</li></ol><h2 id="_2-5-js的数据类型" tabindex="-1"><a class="header-anchor" href="#_2-5-js的数据类型" aria-hidden="true">#</a> 2.5 js的数据类型</h2><h3 id="_2-5-1-简单数据类型" tabindex="-1"><a class="header-anchor" href="#_2-5-1-简单数据类型" aria-hidden="true">#</a> 2.5.1 简单数据类型</h3><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">number</td><td style="text-align:left;">数字类型，不区分小数整数</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;">字符串类型，不区分单双串</td></tr><tr><td style="text-align:left;">boolean</td><td style="text-align:left;">布尔类型，true/false</td></tr><tr><td style="text-align:left;">null</td><td style="text-align:left;">null用于表示变量的值为空，我们可以通过设置值为null来清空对象</td></tr><tr><td style="text-align:left;">undefined</td><td style="text-align:left;">undefined类型只有一个值，就是特殊值undefined。当使用var或let声明了变量但没有初始化时，就相当于给变量赋于了undefined值。</td></tr></tbody></table><h3 id="_2-5-2-复杂数据类型" tabindex="-1"><a class="header-anchor" href="#_2-5-2-复杂数据类型" aria-hidden="true">#</a> 2.5.2 复杂数据类型</h3><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">array</td><td style="text-align:left;">数组的每一项可以用来保存任何类型的数据</td></tr><tr><td style="text-align:left;">object</td><td style="text-align:left;">对象就是一组相似数据和功能的集合</td></tr><tr><td style="text-align:left;">function</td><td style="text-align:left;">每个函数都是Function类型的实例，而且都与其他引用类型一样具有属性和方法</td></tr></tbody></table><h3 id="_2-5-3-数据类型转换" tabindex="-1"><a class="header-anchor" href="#_2-5-3-数据类型转换" aria-hidden="true">#</a> 2.5.3 数据类型转换</h3><ol><li>数据类型判断</li></ol><p>typeof去判断类型</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token comment">// 定义字符串</span>
        <span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&quot;你好JS!&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 定义整数</span>
        <span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">1314</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">13.14</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 定义boolean类型</span>
        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> flag1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> flag1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 末定义类型</span>
        <span class="token keyword">let</span> a<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 引用数据类型</span>
        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>转换成数字类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;123.1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123.1</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;456aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;aaa123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;123aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&#39;123.11aa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//123.11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>转换成字符串类型</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  123</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  string</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  string</span>

        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//  string</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>转换成布尔类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//false</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//false</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="_2-6-运算符" tabindex="-1"><a class="header-anchor" href="#_2-6-运算符" aria-hidden="true">#</a> 2.6 运算符</h2><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>算数运算符</td><td>+、 - 、*、 / 、% 、 ++ 、 --</td></tr><tr><td>赋值运算符</td><td>= 、+= 、-= 、 *= 、 /= 、 %=</td></tr><tr><td>比较运算符</td><td>&gt; 、 &gt;= 、 &lt; 、 &lt;= 、 == 、 ===、 !=</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp; 、 ||、！</td></tr><tr><td>三元运算符</td><td>关系表达式 ? 值1 : 值2;</td></tr></tbody></table><h2 id="_2-7-语句" tabindex="-1"><a class="header-anchor" href="#_2-7-语句" aria-hidden="true">#</a> 2.7 语句</h2><h3 id="_2-7-1-if语句" tabindex="-1"><a class="header-anchor" href="#_2-7-1-if语句" aria-hidden="true">#</a> 2.7.1 if语句</h3><h3 id="_2-7-2-while语句" tabindex="-1"><a class="header-anchor" href="#_2-7-2-while语句" aria-hidden="true">#</a> 2.7.2 while语句</h3><h3 id="_2-7-4-for循环" tabindex="-1"><a class="header-anchor" href="#_2-7-4-for循环" aria-hidden="true">#</a> 2.7.4 for循环</h3><h3 id="_2-7-5-switch" tabindex="-1"><a class="header-anchor" href="#_2-7-5-switch" aria-hidden="true">#</a> 2.7.5 switch</h3><h2 id="_2-7-数组" tabindex="-1"><a class="header-anchor" href="#_2-7-数组" aria-hidden="true">#</a> 2.7 数组</h2><h2 id="_2-8-对象" tabindex="-1"><a class="header-anchor" href="#_2-8-对象" aria-hidden="true">#</a> 2.8 对象</h2><h2 id="_2-9-函数" tabindex="-1"><a class="header-anchor" href="#_2-9-函数" aria-hidden="true">#</a> 2.9 函数</h2><h1 id="_3-js的常用内置对象" tabindex="-1"><a class="header-anchor" href="#_3-js的常用内置对象" aria-hidden="true">#</a> 3. js的常用内置对象</h1>`,67),c=[p];function o(l,i){return s(),a("div",null,c)}const d=n(e,[["render",o],["__file","JSjichu.html.vue"]]);export{d as default};
